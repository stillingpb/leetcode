package round1;

import java.util.ArrayList;
import java.util.List;

public class Sum_Root_to_Leaf_Numbers {

	static class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;

		TreeNode(int x) {
			val = x;
		}

		public String toString() {
			return val + "";
		}
	}

	public TreeNode createTree() {
		String treeStr = "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,#,0,#,0,0,0,0,0,0,0,0,0,0,0,0,#,#,#,#,#,0,0,0,0,0,0,0,#,0,0,#,0,0,0,0,0,0,0,0,0,0,0,0,0,#,0,0,#,#,#,#,0,0,0,0,0,0,#,0,0,0,0,0,0,#,0,0,0,0,0,0,0,0,0,0,#,#,#,0,#,#,0,0,0,#,#,#,#,#,#,#,0,#,0,0,#,#,#,0,0,0,#,#,0,0,#,#,0,0,0,0,0,0,0,0,0,0,#,0,0,#,0,0,#,0,0,0,0,0,0,0,#,#,#,#,#,#,0,0,0,0,0,0,0,0,0,#,0,#,0,0,0,0,0,0,0,0,0,#,0,0,0,0,0,0,#,0,#,#,0,0,0,0,0,#,#,0,#,0,0,0,#,#,0,0,0,0,0,0,0,#,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,#,#,0,0,0,#,0,0,0,0,#,#,0,0,0,0,#,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,#,0,0,0,0,0,0,0,#,#,#,0,#,0,#,0,0,0,0,0,#,0,0,0,#,0,0,0,0,0,0,0,0,0,0,0,0,#,0,#,#,0,0,0,0,#,#,0,#,0,#,0,0,#,0,0,#,#,#,0,0,0,0,0,0,0,#,0,#,0,0,0,0,#,0,0,0,#,0,0,0,#,0,0,0,#,0,0,0,0,0,#,0,0,0,#,#,#,#,0,#,0,#,#,0,0,#,#,0,0,#,#,#,0,0,#,#,0,0,0,#,#,#,#,#,0,0,0,0,#,#,0,0,0,0,0,0,#,0,0,0,0,0,0,0,0,0,0,0,0,#,#,#,0,0,0,0,0,0,#,#,0,0,#,#,0,0,#,#,#,#,#,#,#,0,#,0,#,#,#,#,#,#,0,0,#,#,0,0,0,0,0,0,#,0,0,0,#,0,#,#,0,0,0,0,0,#,0,0,0,0,0,0,#,#,0,#,0,0,0,0,0,#,0,#,0,0,0,#,0,0,#,#,0,0,0,#,#,0,#,#,#,#,0,0,#,0,0,0,#,#,0,#,0,#,0,#,0,0,#,0,0,0,#,0,#,#,0,0,#,#,#,0,#,#,0,0,0,0,#,#,0,0,#,0,0,0,#,#,#,0,0,0,#,#,0,0,0,0,#,0,#,#,0,0,0,#,0,#,#,#,#,#,0,0,0,0,0,#,#,#,#,0,#,#,0,0,#,#,0,0,#,0,#,#,0,#,0,0,#,0,0,#,#,0,0,0,0,0,#,#,#,0,0,0,#,#,0,0,0,0,0,0,0,0,0,0,0,0,0,#,0,0,0,0,#,0,#,0,0,0,#,#,#,0,0,0,0,#,0,#,0,#,0,#,#,#,#,0,0,#,0,0,0,#,0,#,0,0,0,0,#,#,#,0,0,0,#,0,#,#,0,0,0,0,0,0,#,#,#,#,#,#,0,#,#,#,0,#,#,#,#,#,#,#,0,#,0,#,0,0,0,0,0,0,0,0,#,#,#,#,0,0,0,#,0,0,#,#,#,#,#,0,0,#,0,#,0,#,#,#,0,0,#,0,0,0,0,0,#,0,0,#,0,#,0,0,#,#,#,0,#,#,0,#,0,#,#,#,0,#,#,#,0,0,#,0,#,0,0,#,#,#,#,#,0,#,#,0,#,#,#,#,0,#,#,#,#,0,0,0,0,0,0,#,0,#,#,#,0,#,#,#,#,#,0,#,0,0,#,#,0,0,0,0,0,0,0,#,0,#,0,#,#,#,#,#,0,0,0,0,#,#,0,#,0,#,0,#,0,#,#,#,#,#,#,0,#,0,0,0,0,#,0,0,#,#,0,0,#,0,0,0,0,0,0,0,0,0,#,0,#,0,#,#,0,0,0,0,0,#,0,0,#,#,#,#,0,0,0,0,0,0,0,0,#,0,#,#,0,#,0,0,#,#,#,0,#,#,0,0,0,0,0,0,0,0,#,#,#,#,#,#,0,0,#,#,0,0,#,#,0,0,#,#,0,0,0,0,#,#,0,#,#,#,0,0,#,0,#,#,#,#,0,0,#,0,#,0,0,#,0,0,0,#,#,#,0,0,0,0,#,0,#,#,#,#,#,#,#,#,#,#,0,#,#,0,#,#,#,0,#,#,0,0,0,0,#,#,#,#,#,#,#,#,#,0,#,#,0,#,#,#,0,#,#,0,#,#,#,#,#,#,0,0,0,0,#,#,#,#,0,#,#,#,0,0,#,0,#,0,0,#,0,0,#,#,#,#,#,#,#,#,0,#,#,#,#,#,#,#,0,#,#,0,#,#,0,#,0,#,#,#,#,#,#,0,0,0,0,#,#,0,#,#,#,#,0,0,0,0,0,#,0,0,#,0,#,0,#,#,0,0,0,0,#,#,0,0,#,#,#,0,#,#,0,0,0,#,#,0,#,0,0,0,#,0,0,0,0,0,#,0,0,0,0,0,0,0,#,#,#,#,#,0,0,0,0,#,0,#,0,0,0,#,0,#,#,#,0,#,#,#,#,0,0,0,#,#,#,#,0,0,0,0,#,#,0,#,#,0,0,0,0,0,0,0,#,#,0,#,0,0,0,0,0,#,0,0,0,0,0,#,0,0,0,0,0,0,#,#,#,#,0,#,#,#,0,#,#,#,0,#,0,#,#,0,#,#,#,0,#,#,#,#,0,#,#,#,#,#,#,#,0,#,#,#,#,0,#,0,#,#,#,#,#,#,#,#,#,#,0,#,#,#,#,0,0,0,#,0,0,0,#,#,0,#,#,#,#,#,0,#,#,#,#,#,#,#,0,0,#,0,#,0,0,0,#,#,0,0,0,0,0,#,#,0,#,#,#,#,#,#,#,#,#,#,0,#,#,#,0,#,0,0,0,0,#,0,0,0,0,0,#,0,0,#,#,0,0,#,#,#,0,0,0,0,#,#,0,0,0,#,#,0,0,#,#,#,#,0,#,#,0,#,#,0,0,0,0,0,#,#,#,#,#,0,0,#,0,#,0,#,#,#,#,#,#,0,0,#,#,#,0,0,0,#,#,0,#,#,#,#,#,#,#,0,#,#,#,0,#,#,#,#,#,0,0,#,#,#,#,0,#,#,0,#,#,#,0,0,#,#,#,#,0,#,#,#,#,0,#,#,#,#,#,#,#,#,0,#,#,0,#,#,#,#,#,#,#,#,#,0,#,#,#,0,#,#,#,#,#,0,0,#,#,#,#,#,#,#,#,#,#,0,#,#,0,#,#,#,#,#,#,#,#,#,0,#,0,#,#,0,#,#,#,#,#,#,#,#,0,#,#,#,#,#,0,#,#,#,#,#,#,#,#,#,#,0,#,#,0,0,0,0,0,0,0,0,0,0,0,#,0,0,#,#,0,#,0,#,#,0,0,0,0,0,#,0,#,#,#,0,0,0,0,#,0,#,0,0,0,#,#,#,#,0,0,0,0,0,#,#,#,#,#,#,#,#,#,#,#,#,0,#,0,0,0,#,#,0,#,#,#,#,#,#,#,#,#,#,#,#,#,0,#,#,0,0,#,#,#,#,#,#,#,#,#,#,0,#,#,#,#,#,#,#,0,#,#,#,#,#,0,#,0,#,#,#,#,0,0,0,0,0,#,#,0,0,#,#,#,#,0,0,0,0,0,0,0,0,0,#,0,#,#,#,0,0,#,0,0,0,0,#,#,0,#,#,#,#,#,#,#,#,#,#,#,0,#,#,#,#,0,#,#,#,0,0,0,#,#,#,0,#,0,#,#,#,#,0,0,#,0,#,#,#,#,0,0,#,#,0,#,#,#,#,#,0,#,#,0,#,#,#,#,#,0,0,0,#,0,0,#,#,#,#,0,0,0,0,0,0,#,#,0,#,#,0,#,#,0,0,0,0,#,#,#,#,#,#,#,0,#,#,0,#,#,#,0,#,#,#,0,0,#,0,#,#,#,#,#,#,#,#,0,0,0,0,#,#,#,#,#,#,0,#,#,0,#,#,#,#,0,#,#,#,#,#,#,#,#,0,0,0,0,#,0,2,#,0,#,0,0,#,#,#,#,0,0,0,#,0,#,#,#,#,#,#,#,#,0,#,0,0,#,#,#,#,#,0,0,#,0,0,#,#,#,#,#,#,#,#,#,#,0,#,0,#,#,#,0,#,#,0,0,0,#,#,0,#,#,#,#,#,#,#,#,#,#,0,#,#,#,1,#,#,0,#,#,#,0,0,#,#,#,#,#,#,0,0,#,#,#,#,0,#,#,#,#,#,0,#,#,#,#,#,#,#,#,3";
		String[] nstr = treeStr.split(",");
		List<TreeNode> nodes = new ArrayList<TreeNode>();
		nodes.add(new TreeNode(Integer.parseInt(nstr[0])));
		for (int i = 1, count = 0; i < nstr.length; i++, count++) {
			if ("#".equals(nstr[i]))
				continue;
			TreeNode newNode = new TreeNode(Integer.parseInt(nstr[i]));
			nodes.add(newNode);
			TreeNode par = nodes.get(count / 2);
			if (count % 2 == 0)
				par.left = newNode;
			else
				par.right = newNode;
		}
		return nodes.get(0);
	}

	private void intraverse(TreeNode root) {
		if (root == null)
			return;
		intraverse(root.left);
		System.out.print(root.val + " ");
		intraverse(root.right);
	}

	private void pretraverse(TreeNode root) {
		if (root == null)
			return;
		System.out.print(root.val + " ");
		pretraverse(root.left);
		pretraverse(root.right);
	}

	public static void main(String[] args) {
		Sum_Root_to_Leaf_Numbers s = new Sum_Root_to_Leaf_Numbers();
		TreeNode root = s.createTree();
		System.out.println(s.sumNumbers(root));
	}

	public int sumNumbers(TreeNode root) {
		if (root == null)
			return 0;
		ArrayList<ArrayList<Integer>> paths = new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> path = new ArrayList<Integer>();
		traverse(paths, root, path);
		return calSum(paths);
	}

	private int calSum(ArrayList<ArrayList<Integer>> paths) {
		int sum = 0;
		for (ArrayList<Integer> path : paths) {
			int temp = 0;
			for (int i = 0; i < path.size(); i++)
				temp = temp * 10 + path.get(i);
			sum += temp;
		}
		return sum;
	}

	private void traverse(ArrayList<ArrayList<Integer>> paths, TreeNode node,
			ArrayList<Integer> path) {
		if (node.left == null && node.right == null) {
			ArrayList<Integer> curPath = new ArrayList<Integer>(path);
			curPath.add(node.val);
			paths.add(curPath);
			return;
		}
		path.add(node.val);
		if (node.left != null)
			traverse(paths, node.left, path);
		if (node.right != null)
			traverse(paths, node.right, path);
		path.remove(path.size() - 1);
	}
}
